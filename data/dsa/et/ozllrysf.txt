#include<iostream>
#include <list>
#include <limits.h>
 
usingnamespacestd;
 
classGraph
{
    intV;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
    boolisCyclicUtil(intv, boolvisited[], bool*rs);  // used by isCyclic()
public:
    Graph(intV);   // Constructor
    voidaddEdge(intv, intw);   // to add an edge to graph
    boolisCyclic();    // returns true if there is a cycle in this graph
};
 
Graph::Graph(intV)
{
    this->V = V;
    adj = newlist<int>[V];
}
 
voidGraph::addEdge(intv, intw)
{
    adj[v].push_back(w); // Add w to v’s list.
}
 
// This function is a variation of DFSUyt
boolGraph::isCyclicUtil(intv, boolvisited[], bool*recStack)
{
    if(visited[v] == false)
    {
        // Mark the current node as visited and part of recursion stack
        visited[v] = true;
        recStack[v] = true;
 
        // Recur for all the vertices adjacent to this vertex
        list<int>::iterator i;
        for(i = adj[v].begin(); i != adj[v].end(); ++i)
        {
            if( !visited[*i] &&isCyclicUtil(*i, visited, recStack) )
                returntrue;
            elseif(recStack[*i])
                returntrue;    // Mark all the vertices as not visited and not part of recursion
    // stack
    bool*visited = newbool[V];
    bool*recStack = newbool[V];
    for(inti = 0; i < V; i++)
    {
        visited[i] = false;
        recStack[i] = false;
    }
 
    // Call the recursive helper function to detect cycle in different
    // DFS trees
    for(inti = 0; i < V; i++)
        if(isCyclicUtil(i, visited, recStack))
            returntrue;
 
    returnfalse;
}
 
intmain()
{
    // Create a graph given in the above diagram
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
 
    if(g.isCyclic())
        cout<< "Graph contains cycle";
    else
        cout<< "Graph doesn't contain cycle";
    return0;
}

        }
 
    }
    recStack[v] = false;  // remove the vertex from recursion stack
    returnfalse;
}
 
// Returns true if the graph contains a cycle, else false.
// This function is a variation of DFS() in
boolGraph::isCyclic()
{
